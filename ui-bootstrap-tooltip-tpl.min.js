"use strict";
angular.module( "mbrand.angular-ui-bootstrap-tooltip-tpl",
  ["ui.bootstrap"] ).directive( "mibUiBootstrapTooltipTpl", [
  "$compile",
  "$timeout",
  "$http",
  "$templateCache",
  "$parse",
  function ( $compile, $timeout, $http, $templateCache, $parse )
  {
    return {
      restrict: "A",
      scope: {mibTooltipScope: "="},
      compile: function ( tElem )
      {
        return tElem.attr( "tooltip-html-unsafe" ) || tElem.attr( "tooltip-html-unsafe",
          "{{__tooltip}}" ), {
          post: function ( scope,
                           element,
                           attrs )
          {
            function loadAndBindTemplate()
            {
              $http.get( tplUrl, {cache: $templateCache} ).success( function ( tplContent )
              {
                var tpl = $compile( "<div>" + tplContent.trim() + "</div>" )( scope );
                $timeout( function () {scope.__tooltip = tpl.html()} )
              } ).error( function () {throw"couldn't find tooltip template: " + tplUrl + "!"} )
            }

            function templateLoadingProxy( old,
                                           newV,
                                           $scope )
            {
              var scopeName = attrs.mibTooltipScope.split( "." );
              scopeName = scopeName[scopeName.length - 1], scope[scopeName] =
                                                           $scope.mibTooltipScope, loadAndBindTemplate()
            }

            var tplUrl = $parse( attrs.mibUiBootstrapTooltipTpl )( scope );
            element.removeAttr( "mib-ui-bootstrap-tooltip-tpl" ), $compile( element )( scope ), angular.isDefined( scope.mibTooltipScope )
              ? angular.isArray( scope.mibTooltipScope )
                                                                                                  ? scope.$watchCollection( "mibTooltipScope",
              templateLoadingProxy )
                                                                                                  : scope.$watch( "mibTooltipScope",
              templateLoadingProxy, !0 )
              : loadAndBindTemplate()
          }
        }
      }
    }
  }
] );